name: Deploy .NET Azure Functions

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-func-petcatalog-prod
  cancel-in-progress: true

env:
  # Project & runtime
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'src/PetCatalog.Functions'
  DOTNET_VERSION: '9.0.x'                 # usa 9.0.x se isolated; altrimenti 8.0.x
  # Azure
  AZURE_FUNCTIONAPP_NAME: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
  ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET:   ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
  # Test DB
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: petcatalog

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER:     ${{ env.POSTGRES_USER }}
          POSTGRES_DB:       ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET ${{ env.DOTNET_VERSION }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true

    - name: Restore
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Wait for PostgreSQL & init DB
      env:
        PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
      run: |
        until pg_isready -h localhost -p 5432 -U $POSTGRES_USER; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        if [ -f "init-db/01-init.sql" ]; then
          psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f init-db/01-init.sql
        fi

    - name: Run unit tests
      run: dotnet test tests/PetCatalog.UnitTests --configuration Release --no-build --logger trx --results-directory TestResults

    - name: Run integration tests
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"
      run: dotnet test tests/PetCatalog.IntegrationTests --configuration Release --no-build --logger trx --results-directory TestResults

    - name: Publish Azure Functions
      run: >
        dotnet publish
        ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/PetCatalog.Functions.csproj
        -c Release -o ./publish

    - name: Zip package
      run: |
        cd publish
        zip -r ../package.zip .
        cd ..

    - name: Upload artifacts (tests & package)
      uses: actions/upload-artifact@v4
      with:
        name: functionapp-package
        path: |
          package.zip
          TestResults/**/*.trx

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - name: Download package
      uses: actions/download-artifact@v4
      with:
        name: functionapp-package
        path: .

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ env.ARM_CLIENT_ID }}",
            "clientSecret": "${{ env.ARM_CLIENT_SECRET }}",
            "subscriptionId": "${{ env.ARM_SUBSCRIPTION_ID }}",
            "tenantId": "${{ env.ARM_TENANT_ID }}"
          }

    # (Facoltativo) Imposta/aggiorna App Settings prima del deploy
    - name: Ensure required app settings
      run: |
        az functionapp config appsettings set \
          --name  "${{ env.AZURE_FUNCTIONAPP_NAME }}" \
          --resource-group "rg-adoggami-prod" \
          --settings FUNCTIONS_WORKER_RUNTIME=dotnet-isolated FUNCTIONS_EXTENSION_VERSION=~4

    - name: Deploy to Azure Functions (zip deploy)
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: package.zip
        scm-do-build-during-deployment: false
        enable-oryx-build: false

    # (Facoltativo) Sync triggers, utile dopo zip deploy
    - name: Sync triggers
      run: |
        az functionapp sync-function-triggers -g rg-adoggami-prod -n ${{ env.AZURE_FUNCTIONAPP_NAME }}

    - name: Azure logout
      run: az logout
