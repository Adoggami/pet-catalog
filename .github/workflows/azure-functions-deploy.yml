name: Deploy .NET Azure Functions

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: deploy-func-petcatalog-prod
  cancel-in-progress: true

env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: src/PetCatalog.Functions
  DOTNET_VERSION: 9.0.x
  AZURE_FUNCTIONAPP_NAME: ${{ secrets.AZURE_FUNCTIONAPP_NAME }}
  AZURE_RESOURCE_GROUP: rg-adoggami-prod
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: petcatalog

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: false

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Wait for PostgreSQL & init DB
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: |
          until pg_isready -h localhost -p 5432 -U $POSTGRES_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          if [ -f "init-db/01-init.sql" ]; then
            psql -h localhost -U $POSTGRES_USER -d $POSTGRES_DB -f init-db/01-init.sql
          fi

      - name: Run unit tests
        run: dotnet test tests/PetCatalog.UnitTests --configuration Release --no-build --logger trx --results-directory TestResults

      - name: Run integration tests
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=${{ env.POSTGRES_DB }};Username=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }}"
        run: dotnet test tests/PetCatalog.IntegrationTests --configuration Release --no-build --logger trx --results-directory TestResults

      - name: Publish Azure Functions
        run: |
          cd ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          dotnet publish -c Release -o ./output --no-self-contained --runtime linux-x64
          cd output
          zip -r ../../../functionapp.zip .
          cd ../../..

      - name: List published content
        run: |
          echo "Content of the published package:"
          unzip -l functionapp.zip | head -20

      - name: Validate package structure
        run: |
          echo "Validating package structure..."
          unzip -l functionapp.zip | grep -E 'host.json|\.dll|\.deps.json|\.runtimeconfig.json' || (echo "Missing required files!" && exit 1)
          
          # Extract and check host.json
          unzip -p functionapp.zip host.json || echo "Warning: host.json not found at root level"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: functionapp-package
          path: |
            functionapp.zip
            TestResults/**/*.trx

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: functionapp-package
          path: .

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ env.ARM_CLIENT_ID }}",
              "clientSecret": "${{ env.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ env.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ env.ARM_TENANT_ID }}"
            }

      - name: Configure app settings
        run: |
          echo "Configuring Function App settings..."
          az functionapp config appsettings set \
            --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
            --name "${{ env.AZURE_FUNCTIONAPP_NAME }}" \
            --settings \
              FUNCTIONS_WORKER_RUNTIME=dotnet-isolated \
              FUNCTIONS_EXTENSION_VERSION=~4

      - name: Deploy using Azure CLI
        run: |
          echo "Deploying to Function App..."
          az webapp deployment source config-zip \
            --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
            --name "${{ env.AZURE_FUNCTIONAPP_NAME }}" \
            --src functionapp.zip

      - name: Restart Function App
        run: |
          echo "Restarting Function App..."
          az functionapp restart \
            --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
            --name "${{ env.AZURE_FUNCTIONAPP_NAME }}"

      - name: Wait for deployment to settle
        run: sleep 30

      - name: Check deployment status
        run: |
          echo "Checking function app status..."
          az functionapp show \
            --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
            --name "${{ env.AZURE_FUNCTIONAPP_NAME }}" \
            --query "state" -o tsv
          
          echo "Listing deployed functions..."
          az functionapp function list \
            --resource-group "${{ env.AZURE_RESOURCE_GROUP }}" \
            --name "${{ env.AZURE_FUNCTIONAPP_NAME }}" \
            -o table || echo "No functions found or error listing functions"

      - name: Azure logout
        run: az logout